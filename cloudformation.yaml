Parameters:
  Name:
    Type: String
    Description: Name for resource tagging
    MinLength: 1

  Project:
    Type: String
    Description: Project name for resource tagging
    MinLength: 1

  UseKMSEncryption:
    Type: String
    Description: Whether to use KMS encryption for the S3 bucket
    Default: "true"
    AllowedValues:
      - "true"
      - "false"

Resources:
  conformitytos3bucket429759A4:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        Fn::If:
          - UseKMSEncryption
          - ServerSideEncryptionConfiguration:
              - ServerSideEncryptionByDefault:
                  SSEAlgorithm: aws:kms
                  KMSMasterKeyID:
                    Fn::GetAtt:
                      - conformitytos3key07AB9AA2
                      - Arn
          - !Ref AWS::NoValue
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldFiles
            Status: Enabled
            ExpirationInDays: 365
      Tags:
        - Key: Name
          Value: !Ref Name
        - Key: Project
          Value: !Ref Project
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain

  conformitytos3key07AB9AA2:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Statement:
          - Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":iam::717210094962:root"
            Resource: "*"
            Condition:
              StringEquals:
                kms:CallerAccount: 717210094962
          - Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
              - kms:GenerateDataKey
              - kms:TagResource
              - kms:UntagResource
            Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":iam::"
                    - Ref: AWS::AccountId
                    - ":root"
            Resource: "*"
            Condition:
              StringEquals:
                kms:CallerAccount:
                  Ref: AWS::AccountId
        Version: "2012-10-17"
      Description: Key used for the Conformity to SNS integration.
      Tags:
        - Key: Name
          Value: !Ref Name
        - Key: Project
          Value: !Ref Project
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain

  conformitytos3topicFAC3B128:
    Type: AWS::SNS::Topic
    Properties:
      KmsMasterKeyId:
        Fn::GetAtt:
          - conformitytos3key07AB9AA2
          - Arn
      Tags:
        - Key: Name
          Value: !Ref Name
        - Key: Project
          Value: !Ref Project

  conformitytos3topicPolicyC724D756:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action: SNS:Publish
            Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":iam::717210094962:root"
            Resource:
              Ref: conformitytos3topicFAC3B128
            Sid: "0"
        Version: "2012-10-17"
      Topics:
        - Ref: conformitytos3topicFAC3B128

  conformitytos3deadLetterQueue65D0EF22:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId:
        Fn::GetAtt:
          - conformitytos3key07AB9AA2
          - Arn
      Tags:
        - Key: Name
          Value: !Ref Name
        - Key: Project
          Value: !Ref Project

  conformitytos3deadLetterQueuePolicy823A1F4A:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sqs:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn:
                  Ref: conformitytos3topicFAC3B128
            Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Resource:
              Fn::GetAtt:
                - conformitytos3deadLetterQueue65D0EF22
                - Arn
        Version: "2012-10-17"
      Queues:
        - Ref: conformitytos3deadLetterQueue65D0EF22

  conformitytos3functionServiceRoleEF7F4913:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Tags:
        - Key: Name
          Value: !Ref Name
        - Key: Project
          Value: !Ref Project

  conformitytos3functionServiceRoleDefaultPolicyE3294945:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:PutObject
              - s3:PutBucketAcl
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - Ref: conformitytos3bucket429759A4
              - Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - Ref: conformitytos3bucket429759A4
                    - "/*"
          - Action:
              - kms:GenerateDataKey
              - kms:Decrypt
              - kms:DescribeKey
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - conformitytos3key07AB9AA2
                - Arn
        Version: "2012-10-17"
      PolicyName: conformitytos3functionServiceRoleDefaultPolicyE3294945
      Roles:
        - Ref: conformitytos3functionServiceRoleEF7F4913

  conformitytos3function7643C39B:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import logging
          from datetime import datetime
          
          # Configure logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          s3 = boto3.client('s3')
          
          def validate_input(event):
              if not event.get('Records'):
                  raise ValueError("No records found in event")
              if not event['Records'][0].get('Sns'):
                  raise ValueError("No SNS message found in record")
              if not event['Records'][0]['Sns'].get('Message'):
                  raise ValueError("No message found in SNS record")
          
          def parse_message(message):
              try:
                  # Try to parse as JSON
                  return json.loads(message)
              except json.JSONDecodeError:
                  # If not JSON, create a simple object with the message
                  return {"message": message}
          
          def handler(event, context):
              try:
                  logger.info("Received event: %s", json.dumps(event))
                  
                  if not os.environ.get('DESTINATION_BUCKET'):
                      raise Exception("DESTINATION_BUCKET env variable missing")
                  
                  validate_input(event)
                  
                  # Parse the message, handling both JSON and plain text
                  message = parse_message(event['Records'][0]['Sns']['Message'])
                  message = [message]  # keep the format as Array so the file format can cater for multiple checks
                  message = json.dumps(message, indent=2)
                  
                  params = {
                      'Bucket': os.environ['DESTINATION_BUCKET'],
                      'Key': f"{int(datetime.now().timestamp() * 1000)}.json",
                      'Body': message
                  }
                  
                  logger.info("Uploading to S3: %s", params['Key'])
                  response = s3.put_object(**params)
                  logger.info("Upload successful: %s", response)
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Successfully processed message')
                  }
                  
              except Exception as e:
                  logger.error("Error processing message: %s", str(e))
                  raise
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - conformitytos3functionServiceRoleEF7F4913
          - Arn
      Runtime: python3.11
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          DESTINATION_BUCKET:
            Ref: conformitytos3bucket429759A4
      Tags:
        - Key: Name
          Value: !Ref Name
        - Key: Project
          Value: !Ref Project
    DependsOn:
      - conformitytos3functionServiceRoleDefaultPolicyE3294945
      - conformitytos3functionServiceRoleEF7F4913

  conformitytos3functionAllowInvokeConformityToS3Stackconformitytos3topic378E144FAB7065D7:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - conformitytos3function7643C39B
          - Arn
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: conformitytos3topicFAC3B128

  conformitytos3functionconformitytos3topicC0C57F7B:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      TopicArn:
        Ref: conformitytos3topicFAC3B128
      Endpoint:
        Fn::GetAtt:
          - conformitytos3function7643C39B
          - Arn
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - conformitytos3deadLetterQueue65D0EF22
            - Arn

  conformitytos3functionAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: ConformityToS3FunctionErrors
      AlarmDescription: "Alarm when Lambda function errors exceed threshold"
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value:
            Ref: conformitytos3function7643C39B
      AlarmActions:
        - !Sub "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:ConformityToS3Alerts"
      Tags:
        - Key: Name
          Value: !Ref Name
        - Key: Project
          Value: !Ref Project

Outputs:
  EventsBucket:
    Description: Bucket name that hosts all events
    Value:
      Ref: conformitytos3bucket429759A4

  TopicARN:
    Description: SNS Topic ARN to be used in Conformity dashboard
    Value:
      Ref: conformitytos3topicFAC3B128

Conditions:
  UseKMSEncryption: !Equals [!Ref UseKMSEncryption, "true"]
